var
  gulp          = require('gulp'),
  del           = require('del'),
  concat        = require('gulp-concat'),
  less          = require('gulp-less'),
  header        = require('gulp-header'),
  uglify        = require('gulp-uglify'),
  autoprefixer  = require('gulp-autoprefixer'),
  minifycss     = require('gulp-minify-css'),
  path          = require('path'),
  merge         = require('merge-stream'),
  resolveDeps   = require('gulp-resolve-dependencies');

var pathsÂ = {
  js: [
    {
      src: 'src/js/bootstrap.js',
      dest: 'assets/lib/bootstrap/js/bootstrap.min.js',
      minify: true
    },
    {
      src: 'src/js/dashboard.js',
      dest: 'assets/js/dashboard.min.js',
      minify: true
    },
    {
      src: 'src/bower_components/jquery.cookie/jquery.cookie.js',
      dest: 'assets/lib/jquery/jquery.cookie.min.js',
      minify: true
    },
    {
      src: 'src/js/codemirror.js',
      dest: 'assets/lib/codemirror/codemirror.min.js',
      minify: true
    }
  ],
  less: [
    {
      src: 'src/less/bootstrap.less',
      dest: 'assets/lib/bootstrap/css/bootstrap.min.css',
      minify: true
    },
    {
      src: 'src/bower_components/font-awesome/less/font-awesome.less',
      dest: 'assets/lib/font-awesome/css/font-awesome.min.css',
      minify: true
    },
    {
      src: 'src/less/dashboard/dashboard.less',
      dest: 'assets/css/dashboard.css',
      minify: true
    },
    {
      src: 'src/less/codemirror.less',
      dest: 'assets/lib/codemirror/codemirror.min.css',
      minify: true
    }
  ],
  lib: [
    {
      src: 'src/bower_components/jquery/dist/jquery.min.js',
      dest: 'assets/lib/jquery'
    },
    {
      src: 'src/bower_components/jquery/dist/jquery.min.map',
      dest: 'assets/lib/jquery'
    },
    {
      src: 'src/bower_components/list.js/dist/list.min.js',
      dest: 'assets/lib/list.js'
    },
    {
      src: 'src/bower_components/list.pagination.js/dist/list.pagination.min.js',
      dest: 'assets/lib/list.js'
    },
    {
      src: 'src/bower_components/font-awesome/fonts/*.{ttf,woff,eof,eot,svg}',
      dest: 'assets/lib/font-awesome/fonts'
    },
    {
      src: 'src/bower_components/bootstrap/fonts/*.{ttf,woff,eof,eot,svg}',
      dest: 'assets/lib/bootstrap/fonts'
    }
  ],
  fonts: {
    src: 'src/fonts/**.*',
    dest: 'assets/fonts'
  },
  images: {
    src: 'src/img/**/*.*',
    dest: 'assets/img'
  }
};

var prefix_browsers = [
  'Android >= 4',
  'Chrome >= 20',
  'Firefox >= 24', // Firefox 24 is the latest ESR
  'Explorer >= 8',
  'iOS >= 6',
  'Opera >= 12',
  'Safari >= 6'
];

gulp.task('clean', function (cb) {
  del(['assets'], cb);
});

gulp.task('build-js', ['clean'], function(){

  var tasks = paths.js.map(function(file){
    var g = gulp
      .src(file.src)
      .pipe(resolveDeps({
        pattern: /\* @require [\s-]*(.*?\.js)/g,
        log: true
      }))
      .pipe(concat(path.basename(file.dest)))
    ;

    if(file.minify){
      g.pipe(uglify());
    }

    return g
      .pipe(header("/* This file is generated by gulp! */\n"))
      .pipe(gulp.dest(path.dirname(file.dest)))
    ;
  });

  return merge(tasks);
});

gulp.task('build-less', ['clean'], function(){

  var tasks = paths.less.map(function(file){
    var g = gulp
      .src(file.src)
      .pipe(less())
      .pipe(autoprefixer({
          browsers: prefix_browsers
        }))
      .pipe(concat(path.basename(file.dest)))
    ;

    if(file.minify){
      g.pipe(minifycss({
        keepSpecialComments: 0,
        relativeTo: path.dirname(file.dest)
      }));
    }

    return g
      .pipe(header("/* This file is generated by gulp! */\n"))
      .pipe(gulp.dest(path.dirname(file.dest)))
    ;
  });

  return merge(tasks);
});

gulp.task('copy-libs', ['clean'], function(){

  var tasks = paths.lib.map(function(file){
    return gulp.src(file.src)
        .pipe(gulp.dest(file.dest));
  });

  return merge(tasks);
});

gulp.task('copy-images', ['clean'], function(){
  return gulp.src(paths.images.src)
    .pipe(gulp.dest(paths.images.dest));
});

gulp.task('copy-fonts', ['clean'], function(){
  return gulp.src(paths.fonts.src)
    .pipe(gulp.dest(paths.fonts.dest));
});

/**
 * Watch src
 */
gulp.task('watch', ['clean'], function () {
  var watchjs =  paths.js.map(function(file){
    return path.dirname(file.src) + '/**/*.js';
  });

  var watchless =  paths.less.map(function(file){
    return path.dirname(file.src) + '/**/*.less';
  });

  gulp
      .watch(watchjs.concat(watchless), ['build'])
      .on('change', function(event) {
        console.log('File ' + event.path + ' was ' + event.type + ', running tasks...');
      })
  ;

  gulp.watch([paths.images.src], ['copy-images']);
});

gulp.task('copy-assets', [
  'copy-libs',
  'copy-images',
  'copy-fonts'
]);

gulp.task('build', [
  'copy-assets',
  'build-js',
  'build-less'
]);

gulp.task('default', [
  'build',
  'watch'
]);
